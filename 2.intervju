Jeg har lyst å vise en liten webapplikasjon som vi lagde i forbindelse med et masterfag 
som jeg tok ifjor hørst. Faget heter Open source development og tar sikte på utvikling og arkitektur 
basert på åpne og frie teknologier. Den applikasjonen jeg har tenkt å vise er en web-basert student-
system som kjører på en lokalserver, den lar oss registrere fag med navn og emnekode, lar oss registrere
studenter og vi kan også melde opp studenter til de fagene vi opprettet, altså et ordinært student-system.
Vi piffa opp applikasjonen ved å implementere et kart (med google maps apier) som lar studenter registrere sin
posisjon slik at systemet kan tracke dem. (dette er ikke et realistisk program, da det ville vært ulovlig å 
spore studentene, men vi ville legge til ekstra funksjonalitet gjennom apier som ligger åpne på nett)..kan snakke
litt mer om hvordan den fungerer litt senere.

System er delt i 3 lag. Vi har persistance-laget(altså lagring av dataene i databasen med hibernate), vi har tjeneste-laget( 
som styrer data-flyten mellom persistance-laget og presentasjons-laget) og vi har presentasjons-laget(som er det 
grafiske grensesnittet, altså det vi ser). Prosjektet er basert på spring MVC som tar sikte på å skille disse lagene
fra hverandre slik at vi kan utvikle på en enklere og mer oversiktlig måte.

1) Det vi ser her er DAO klassene for våre objekter(data access objects), disse klassene er de interfaces vi forholder oss 
til (ikke å forveksle med GUI) men kontrakten for hvordan objektene(students og courses) skal lagres i databasen. Disse interfaces implementeres av hibernateDAO(course/student).java som tar seg av databaseoperasjoner som "SAVE","Update","Delete","Enroll" og osv. Dette laget snakker direkte med databasen ved å bruke "sessionFactory.getCurrentSession()"

--> vis eksempel i GUI ved å lagre en student og et kurs. Vis databasen

2) Når vi melder opp en student til et fag så må vi slå sammen (mappe) 2 entiteter, vi må slå sammen student og kurs.
Vi oppretter 2 "mapping" filer, en for student(Student.hbm.xml) og en for kurs(Course.hbm.xml) og bruker id ene deres som
fjernnøkkler for å opprette en ny tabell kalt 'courses_students'som mapper kursets id til studentens id. Med disse filene
oppretter hibernate orm modellen vår som er en 'mange til mange' relasjon. Akkurat det vi vil oppnå siden en student kan melde
seg opp til flere fag og et fag kan ha mange studenter.

--> vis eksempel i GUI ved å melde opp en student til et fag. Vis databasen

3) Vi har tjenestelaget (DefaultStudentSystem.java) som opptrer som 'limet' mellom presentasjonslaget og lagringslaget.
Her finner vi operasjoner som henter data til og fra presentasjonslaget. Dette laget benytter seg av DAO interfacene for henting
og lagring av objektene i modellen vår. BaseControlleren.java tar seg av url forespørsler, altså den mapper urls til spesifikke
metoder. Controlleren snakker direkte med metodene i tjenestelaget (StudentSystem.java)

--> Vis mapping av metoder og url. Vis knappene

4) Komponentene i systemet blir koblet sammen ved å bruke 'Spring container' i (beans.xml) og dependency injection

Location og Google maps





Grunnen til at ..

1) psql inf5750
2) \l or \l: lists all databases
3) \dt “Viser alle relasjoner/tables”
4) SELECT * FROM courses;
5) \q for å avslutte

-Other postgress commands

*) Koble til databasen
\connect database_name 

*) “Shows users on database”
\du 

*) Lage bruker med passord
CREATE USER jjasinski WITH PASSWORD 'myPassword';

*) change password
ALTER USER Postgres WITH PASSWORD 'mypass';

*) Grant user createdb privilege:
ALTER USER myuser WITH createdb;  

*) shows version
SELECT version(); 

*) Help
\h 

*) Export table as json file (Creates a file with filename 'courses')
COPY (SELECT row_to_json(t) FROM courses as t) to '/Users/Nicolas/Desktop/courses';

*) Export table as csv file
COPY students TO '/Users/Nicolas/Desktop/studs.csv' DELIMITER ',' CSV HEADER;


Opprettelse av spring prosjekt i maven

$ mvn archetype:generate -DgroupId=no.uio.inf5750  -DartifactId=assignment1 -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

sjekk ut https://www.mkyong.com/spring/quick-start-maven-spring-example/
